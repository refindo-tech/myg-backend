generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  userLabel UserLabel?
  role      UserRole   @default(MEMBER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  refreshToken       RefreshToken[]
  userProfiles       UserProfile[]
  socialMedias       SocialMedia[]
  userCoins          UserCoin[]
  notifications      Notification[]
  materials          Material[]          @relation("MaterialUploader")
  trainings          Training[]          @relation("TrainingUploader")
  messagesSent       Message[]           @relation("MessageSender")
  messagesReceived   Message[]           @relation("MessageReceiver")
  exams              Exam[]              @relation("ExamCreator")
  examResults        ExamResult[]
  products           Product[]           @relation("ProductUploader")
  orders             Order[]
  carts              Cart[]
  wishlists          Wishlist[]
  guidelines         Guideline[]         @relation("GuidelineUploader")
  beautyAppointments BeautyAppointment[]
  reviews            Review[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}

model Admin {
  adminId     Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model UserProfile {
  profileId      Int      @id @default(autoincrement())
  userId         Int
  fullName       String
  studioName     String
  address        String
  phoneNumber    String
  profilePicture String?
  socialMedia    String
  birthdate      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [userId])
}

model UserCoin {
  coinId Int  @id @default(autoincrement())
  userId Int
  value  Int
  user   User @relation(fields: [userId], references: [userId])
}

model SocialMedia {
  socialMediaId      Int             @id @default(autoincrement())
  userId             Int
  socialMediaAccount String
  socialMediaType    SocialMediaType
  user               User            @relation(fields: [userId], references: [userId])
}

model Notification {
  notificationId   Int              @id @default(autoincrement())
  userId           Int
  notificationType NotificationType
  message          String
  sentAt           DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [userId])
}

model Training {
  trainingId   Int        @id @default(autoincrement())
  trainingName String
  description  String
  uploadedBy   Int
  dateStart    DateTime?
  dateFinish   DateTime?
  address      String?
  price        Int?
  embedMaps    String?    @db.Text
  linkMaps     String?
  materi       String?    @db.Text
  benefit      String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  materials    Material[]
  user         User       @relation("TrainingUploader", fields: [uploadedBy], references: [userId])
}

model Material {
  materialId       Int             @id @default(autoincrement())
  trainingId       Int
  title            String
  description      String
  type             MaterialType
  membershipLevel  MembershipLevel
  banner           String
  brosur           String?
  formRegistration String
  ebook            String
  youtubeVideo     String
  zoomRecord       String
  uploadedBy       Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  training         Training        @relation(fields: [trainingId], references: [trainingId])
  user             User            @relation("MaterialUploader", fields: [uploadedBy], references: [userId])
}

model Message {
  messageId  Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  sentAt     DateTime @default(now())
  updatedAt  DateTime @default(now())
  isDeleted  Boolean  @default(false)
  sender     User     @relation("MessageSender", fields: [senderId], references: [userId])
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [userId])
}

model Exam {
  examId      Int          @id @default(autoincrement())
  title       String
  description String
  type        ExamType
  createdBy   Int
  dateStart   DateTime
  dateFinish  DateTime
  address     String?
  price       Int?
  embedMaps   String?      @db.Text
  linkMaps    String?
  brosur      String?
  banner      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  questions   Question[]
  user        User         @relation("ExamCreator", fields: [createdBy], references: [userId])
  examResults ExamResult[]
}

model Question {
  questionId    Int          @id @default(autoincrement())
  examId        Int
  questionText  String
  questionType  QuestionType
  options       Json
  correctAnswer String
  exam          Exam         @relation(fields: [examId], references: [examId])
}

model ExamResult {
  resultId    Int      @id @default(autoincrement())
  examId      Int
  userId      Int
  score       Int
  completedAt DateTime @default(now())
  exam        Exam     @relation(fields: [examId], references: [examId])
  user        User     @relation(fields: [userId], references: [userId])
}

model Product {
  productId     Int            @id @default(autoincrement())
  name          String
  description   String
  priceId       Int
  stock         Int
  productImages Json
  type          ProductType
  uploadedBy    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  price         ProductPrice[]
  user          User           @relation("ProductUploader", fields: [uploadedBy], references: [userId])
  orderItems    OrderItem[]
  cart          Cart[]
  wishlist      Wishlist[]
  guideline     Guideline[]
}

model ProductPrice {
  priceId   Int       @id @default(autoincrement())
  productId Int
  type      PriceType
  price     Decimal
  product   Product   @relation(fields: [productId], references: [productId])
}

model Order {
  orderId     Int         @id @default(autoincrement())
  userId      Int
  totalAmount Decimal
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  orderItems  OrderItem[]
  user        User        @relation(fields: [userId], references: [userId])
}

model OrderItem {
  orderItemId Int     @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  price       Decimal
  order       Order   @relation(fields: [orderId], references: [orderId])
  product     Product @relation(fields: [productId], references: [productId])
}

model Cart {
  cartId    Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  user      User    @relation(fields: [userId], references: [userId])
  product   Product @relation(fields: [productId], references: [productId])
}

model Wishlist {
  wishlistId Int     @id @default(autoincrement())
  userId     Int
  productId  Int
  user       User    @relation(fields: [userId], references: [userId])
  product    Product @relation(fields: [productId], references: [productId])
}

model Guideline {
  guidelineId Int           @id @default(autoincrement())
  productId   Int
  type        GuidelineType
  content     String
  details     String
  uploadedBy  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  product     Product       @relation(fields: [productId], references: [productId])
  user        User          @relation("GuidelineUploader", fields: [uploadedBy], references: [userId])
}

model BeautyService {
  serviceId   Int     @id @default(autoincrement())
  title       String
  description String
  price       Decimal
  imageUrl    String?
  viewCount   Int     @default(0)

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  availability       Availability[]
  beautyAppointments BeautyAppointment[]
  reviews            Review[]
}

model BeautyAppointment {
  appointmentId   Int               @id @default(autoincrement())
  userId          Int
  serviceId       Int
  appointmentDate DateTime
  appointmentTime DateTime
  status          AppointmentStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [userId])
  beautyService   BeautyService     @relation(fields: [serviceId], references: [serviceId])
}

model Availability {
  availabilityId Int           @id @default(autoincrement())
  serviceId      Int
  day            Day
  startTime      DateTime
  endTime        DateTime
  beautyService  BeautyService @relation(fields: [serviceId], references: [serviceId])
}

model Review {
  reviewId      Int           @id @default(autoincrement())
  userId        Int
  serviceId     Int
  comment       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [userId])
  beautyService BeautyService @relation(fields: [serviceId], references: [serviceId])
}

enum UserLabel {
  SAHABAT_MY_ACADEMI
  RETAIL
  AGENT
  DISTRIBUTOR
}

enum UserRole {
  VISITOR
  MEMBER
  ADMIN
  SUPER_ADMIN
}

enum SocialMediaType {
  TWITTER
  FACEBOOK
  YOUTUBE
  INSTAGRAM
}

enum NotificationType {
  BIRTHDAY
  TRANSFER
}

enum MaterialType {
  OFFLINE
  ONLINE
  ASYNCHRONOUS
}

enum MembershipLevel {
  PREMIUM
  FREE
}

enum ExamType {
  ONLINE
  OFFLINE
}

enum QuestionType {
  MULTIPLE_CHOICE
  ESSAY
}

enum ProductType {
  PRODUCT
  SERVICE
  RETAIL
  AGENT
  DISTRIBUTOR
}

enum PriceType {
  SAHABAT_MY_ACADEMI
  RETAIL
  AGENT
  DISTRIBUTOR
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum GuidelineType {
  RETAIL
  AGENT
  DISTRIBUTOR
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
